window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "vtreat", "modulename": "vtreat", "kind": "module", "doc": "<p>This<a href=\"https://github.com/WinVector/pyvtreat\">https://github.com/WinVector/pyvtreat</a> is the Python version of the vtreat data preparation system\n(also available as an R package<a href=\"https://winvector.github.io/vtreat/\">https://winvector.github.io/vtreat/</a>.</p>\n\n<p>vtreat is a DataFrame processor/conditioner that prepares\nreal-world data for supervised machine learning or predictive modeling\nin a statistically sound manner.</p>\n\n<p>vtreat takes an input DataFrame\nthat has a specified column called \"the outcome variable\" (or \"y\")\nthat is the quantity to be predicted (and must not have missing\nvalues).  Other input columns are possible explanatory variables\n(typically numeric or categorical/string-valued, these columns may\nhave missing values) that the user later wants to use to predict \"y\".\nIn practice such an input DataFrame may not be immediately suitable\nfor machine learning procedures that often expect only numeric\nexplanatory variables, and may not tolerate missing values.</p>\n\n<p>To solve this, vtreat builds a transformed DataFrame where all\nexplanatory variable columns have been transformed into a number of\nnumeric explanatory variable columns, without missing values.  The\nvtreat implementation produces derived numeric columns that capture\nmost of the information relating the explanatory columns to the\nspecified \"y\" or dependent/outcome column through a number of numeric\ntransforms (indicator variables, impact codes, prevalence codes, and\nmore).  This transformed DataFrame is suitable for a wide range of\nsupervised learning methods from linear regression, through gradient\nboosted machines.</p>\n\n<p>The idea is: you can take a DataFrame of messy real world data and\neasily, faithfully, reliably, and repeatably prepare it for machine\nlearning using documented methods using vtreat.  Incorporating\nvtreat into your machine learning workflow lets you quickly work\nwith very diverse structured data.</p>\n\n<p>Worked examples can be found <code>here</code><a href=\"https://github.com/WinVector/pyvtreat/tree/master/Examples\">https://github.com/WinVector/pyvtreat/tree/master/Examples</a>.</p>\n\n<p>For more detail please see here: <code>arXiv:1611.09477\nstat.AP</code><a href=\"https://arxiv.org/abs/1611.09477\">https://arxiv.org/abs/1611.09477</a> (the documentation describes the R version,\nhowever all of the examples can be found worked in Python \n<code>here</code><a href=\"https://github.com/WinVector/pyvtreat/tree/master/Examples/vtreat_paper1\">https://github.com/WinVector/pyvtreat/tree/master/Examples/vtreat_paper1</a>).</p>\n\n<p>vtreat is available\nas a <code>Python/Pandas package</code><a href=\"https://github.com/WinVector/vtreat\">https://github.com/WinVector/vtreat</a>,\nand also as an <code>R package</code><a href=\"https://github.com/WinVector/vtreat\">https://github.com/WinVector/vtreat</a>.</p>\n"}, {"fullname": "vtreat.cross_plan", "modulename": "vtreat.cross_plan", "kind": "module", "doc": "<p>Basic cross validation methods</p>\n"}, {"fullname": "vtreat.cross_plan.CrossValidationPlan", "modulename": "vtreat.cross_plan", "qualname": "CrossValidationPlan", "kind": "class", "doc": "<p>Data splitting plan</p>\n", "bases": "abc.ABC"}, {"fullname": "vtreat.cross_plan.CrossValidationPlan.split_plan", "modulename": "vtreat.cross_plan", "qualname": "CrossValidationPlan.split_plan", "kind": "function", "doc": "<p>Build a cross validation plan for the given parameters.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>n_rows</strong>:  (optional) number of input rows</li>\n<li><strong>k_folds</strong>:  (optional) number of folds we want</li>\n<li><strong>data</strong>:  (optional) explanatory variables</li>\n<li><strong>y</strong>:  (optional) dependent variable</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>cross validation plan (list of dictionaries)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">n_rows</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">k_folds</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.cross_plan.KWayCrossPlanYStratified", "modulename": "vtreat.cross_plan", "qualname": "KWayCrossPlanYStratified", "kind": "class", "doc": "<p>K-way cross validation plan, attempting an even y-distribution</p>\n", "bases": "CrossValidationPlan"}, {"fullname": "vtreat.cross_plan.KWayCrossPlanYStratified.split_plan", "modulename": "vtreat.cross_plan", "qualname": "KWayCrossPlanYStratified.split_plan", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>n_rows</strong>:  required, number of rows</li>\n<li><strong>k_folds</strong>:  required, number of cross-folds</li>\n<li><strong>data</strong>:  not used</li>\n<li><strong>y</strong>:  required, outcomes to stratify on</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">n_rows</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">k_folds</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.effect_scaler", "modulename": "vtreat.effect_scaler", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "vtreat.effect_scaler.EffectScaler", "modulename": "vtreat.effect_scaler", "qualname": "EffectScaler", "kind": "class", "doc": "<p>Effect scaler. First step of Y-Aware PCA (ref: <a href=\"https://win-vector.com/2022/09/08/y-aware-pca/\">https://win-vector.com/2022/09/08/y-aware-pca/</a> )\nor Y-Aware L2-regularization.</p>\n"}, {"fullname": "vtreat.effect_scaler.EffectScaler.fit", "modulename": "vtreat.effect_scaler", "qualname": "EffectScaler.fit", "kind": "function", "doc": "<p>Get per-variable effect scaling of (X[:, i] - np.mean(X[:, i])) -> (y - np.mean(y)).\nSee <a href=\"https://win-vector.com/2022/09/08/y-aware-pca/\">https://win-vector.com/2022/09/08/y-aware-pca/</a></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  explanatory values</li>\n<li><strong>y</strong>:  dependent values</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>self for method chaining</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.effect_scaler.EffectScaler.transform", "modulename": "vtreat.effect_scaler", "qualname": "EffectScaler.transform", "kind": "function", "doc": "<p>Transform date based on previous fit.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  explanatory values</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.effect_scaler.EffectScaler.predict", "modulename": "vtreat.effect_scaler", "qualname": "EffectScaler.predict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.effect_scaler.EffectScaler.fit_transform", "modulename": "vtreat.effect_scaler", "qualname": "EffectScaler.fit_transform", "kind": "function", "doc": "<p>Fit and transform combined. Not computed out of sample.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  explanatory values</li>\n<li><strong>y</strong>:  dependent values</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.effect_scaler.EffectScaler.fit_predict", "modulename": "vtreat.effect_scaler", "qualname": "EffectScaler.fit_predict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.partial_pooling_estimator", "modulename": "vtreat.partial_pooling_estimator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "vtreat.partial_pooling_estimator.standard_effect_estimate", "modulename": "vtreat.partial_pooling_estimator", "qualname": "standard_effect_estimate", "kind": "function", "doc": "<p>Get the standard estimate of the effect at locations from observations.\nPlease see: <a href=\"https://github.com/WinVector/Examples/blob/main/PartialPooling/PartialPooling.ipynb\">https://github.com/WinVector/Examples/blob/main/PartialPooling/PartialPooling.ipynb</a></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>observations</strong>:  the observations data frame</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>standard estimate of effect or mean by location</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">observations</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.partial_pooling_estimator.pooled_effect_estimate", "modulename": "vtreat.partial_pooling_estimator", "qualname": "pooled_effect_estimate", "kind": "function", "doc": "<p>Get the pooled estimate of effect.\nSee: <a href=\"https://github.com/WinVector/Examples/blob/main/PartialPooling/PartialPooling.ipynb\">https://github.com/WinVector/Examples/blob/main/PartialPooling/PartialPooling.ipynb</a> .</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>observations</strong>:  the observations data frame, with columns location_id and observation</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>pooled estimates</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">observations</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.stats_utils", "modulename": "vtreat.stats_utils", "kind": "module", "doc": "<p>util for basic statistical steps</p>\n"}, {"fullname": "vtreat.stats_utils.our_corr_score", "modulename": "vtreat.stats_utils", "qualname": "our_corr_score", "kind": "function", "doc": "<p>Compute Pearson correlation. Case-out some corner cases.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>y_true</strong>:  truth values</li>\n<li><strong>y_pred</strong>:  predictions</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>(pearson r, significance)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">y_true</span>, </span><span class=\"param\"><span class=\"n\">y_pred</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.stats_utils.est_deviance", "modulename": "vtreat.stats_utils", "qualname": "est_deviance", "kind": "function", "doc": "<p>Estimate the deviance</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>y</strong>:  truth values</li>\n<li><strong>est</strong>:  predictions</li>\n<li><strong>epsilon</strong>:  how close to get to 0 and 1</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>deviance estimate</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">est</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1e-05</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.stats_utils.sklearn_solve_logistic", "modulename": "vtreat.stats_utils", "qualname": "sklearn_solve_logistic", "kind": "function", "doc": "<p>Single variable logistic regression.\nAssumes special cases of solve_logistic_regression already eliminated.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>y</strong>:  dependent variable</li>\n<li><strong>x</strong>:  explanatory variable</li>\n<li><strong>regularization</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>model predictions</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">regularization</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1e-06</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.stats_utils.solve_logistic_regression", "modulename": "vtreat.stats_utils", "qualname": "solve_logistic_regression", "kind": "function", "doc": "<p>Single variable logistic regression. Returns predictions, corner\ncases removed.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>y</strong>:  dependent variable</li>\n<li><strong>x</strong>:  explanatory variable</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>predictions</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.stats_utils.our_pseudo_R2", "modulename": "vtreat.stats_utils", "qualname": "our_pseudo_R2", "kind": "function", "doc": "<p>Return the logistic pseudo-R2</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>y_true</strong>:  dependent variable</li>\n<li><strong>y_pred</strong>:  explanatory variable</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>(pseudo-R2, significance)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">y_true</span>, </span><span class=\"param\"><span class=\"n\">y_pred</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.stats_utils.xicor", "modulename": "vtreat.stats_utils", "qualname": "xicor", "kind": "function", "doc": "<p>xicor calculation built to match from R::caclulateXI() and published article.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>xvec</strong>:  numeric vector with explanatory variable to compute xicor for.</li>\n<li><strong>yvec</strong>:  numeric dependent variable to relate to.</li>\n<li><strong>n_reps</strong>:  number of times to repeat calculation.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>mean and standard error of estimate (under x-tie breaking)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">xvec</span>, </span><span class=\"param\"><span class=\"n\">yvec</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">n_reps</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.stats_utils.xicor_for_frame", "modulename": "vtreat.stats_utils", "qualname": "xicor_for_frame", "kind": "function", "doc": "<p>Calculate xicor for all columns of data frame d with respect to dependent column y.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>d</strong>:  data frame of proposed explanatory variables.</li>\n<li><strong>y</strong>:  vector of the dependent variable values.</li>\n<li><strong>n_reps</strong>:  number of times to repeat experiment (positive integer)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data frame with: variable (name of column), xicor (estimated xicor statistic),\n           xicor_se (standard error of xicor estimate, goes to zero as n_reps grows),\n           xicor_perm_mean (mean value of xicor with y scrambled, goes to zero as n_reps grows),\n           xicor_perm_stddev (sample standard deviation of y scrambled xicor estimates,\n           used to form z or t style estimates).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">n_reps</span><span class=\"o\">=</span><span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.test_util", "modulename": "vtreat.test_util", "kind": "module", "doc": "<p>Utils that help with testing. This module is allowed to import many other modules.</p>\n"}, {"fullname": "vtreat.test_util.equivalent_frames", "modulename": "vtreat.test_util", "qualname": "equivalent_frames", "kind": "function", "doc": "<p>return False if the frames are equivalent (up to column re-ordering and possible row-reordering).\nIgnores indexing. None and nan are considered equivalent in numeric contexts.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">float_tol</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1e-08</span>,</span><span class=\"param\">\t<span class=\"n\">check_column_order</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">cols_case_sensitive</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">check_row_order</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.transform", "modulename": "vtreat.transform", "kind": "module", "doc": "<p>base class for user transforms</p>\n"}, {"fullname": "vtreat.transform.UserTransform", "modulename": "vtreat.transform", "qualname": "UserTransform", "kind": "class", "doc": "<p>base class for user transforms, should express taking a set of k inputs to k outputs independently</p>\n", "bases": "abc.ABC"}, {"fullname": "vtreat.transform.UserTransform.y_aware_", "modulename": "vtreat.transform", "qualname": "UserTransform.y_aware_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "vtreat.transform.UserTransform.treatment_", "modulename": "vtreat.transform", "qualname": "UserTransform.treatment_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "vtreat.transform.UserTransform.incoming_vars_", "modulename": "vtreat.transform", "qualname": "UserTransform.incoming_vars_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "vtreat.transform.UserTransform.derived_vars_", "modulename": "vtreat.transform", "qualname": "UserTransform.derived_vars_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "vtreat.transform.UserTransform.fit", "modulename": "vtreat.transform", "qualname": "UserTransform.fit", "kind": "function", "doc": "<p>sklearn API</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  explanatory values</li>\n<li><strong>y</strong>:  dependent values</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>self for method chaining</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.transform.UserTransform.transform", "modulename": "vtreat.transform", "qualname": "UserTransform.transform", "kind": "function", "doc": "<p>sklearn API</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  explanatory values</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.transform.UserTransform.fit_transform", "modulename": "vtreat.transform", "qualname": "UserTransform.fit_transform", "kind": "function", "doc": "<p>sklearn API</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  explanatory values</li>\n<li><strong>y</strong>:  dependent values</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.util", "modulename": "vtreat.util", "kind": "module", "doc": "<p>Utility functions for vtreat</p>\n"}, {"fullname": "vtreat.util.safe_to_numeric_array", "modulename": "vtreat.util", "qualname": "safe_to_numeric_array", "kind": "function", "doc": "<p>Convert array to numeric. Note, will parse strings (due to numpy)!</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:  array to process</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>numeric array</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.util.can_convert_v_to_numeric", "modulename": "vtreat.util", "qualname": "can_convert_v_to_numeric", "kind": "function", "doc": "<p>check if non-empty vector can convert to numeric</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if can convert to numeric, false otherwise (no string parsing).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.util.is_bad", "modulename": "vtreat.util", "qualname": "is_bad", "kind": "function", "doc": "<p>For numeric vector x, return logical vector of positions that are null, NaN, infinite.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.util.numeric_has_range", "modulename": "vtreat.util", "qualname": "numeric_has_range", "kind": "function", "doc": "<p>Check if a numeric vector has numeric range.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:  vector to check</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if max &gt; min values in vector, else False.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.util.summarize_column", "modulename": "vtreat.util", "qualname": "summarize_column", "kind": "function", "doc": "<p>Summarize column to a non-missing scalar.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:  a vector/Series or column of numbers</li>\n<li><strong>fn</strong>:  summarize function (such as numpy.mean), only passed non-bad positions</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>scalar float summary of the non-None positions of x (otherwise 0)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">fn</span><span class=\"o\">=&lt;</span><span class=\"n\">function</span> <span class=\"n\">mean</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.util.get_unique_value_count", "modulename": "vtreat.util", "qualname": "get_unique_value_count", "kind": "function", "doc": "<p>compute how many unique values in list-x</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.util.grouped_by_x_statistics", "modulename": "vtreat.util", "qualname": "grouped_by_x_statistics", "kind": "function", "doc": "<p>compute some grouped by x vector summaries of numeric y vector (no missing values in y)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.util.pooled_impact_estimate", "modulename": "vtreat.util", "qualname": "pooled_impact_estimate", "kind": "function", "doc": "<p>compute some pooled grouped by x vector summaries of numeric y vector (no missing values in y)\n<a href=\"http://www.win-vector.com/blog/2017/09/partial-pooling-for-lower-variance-variable-encoding/\">http://www.win-vector.com/blog/2017/09/partial-pooling-for-lower-variance-variable-encoding/</a>\n<a href=\"https://github.com/WinVector/Examples/blob/main/PartialPooling/PartialPooling.ipynb\">https://github.com/WinVector/Examples/blob/main/PartialPooling/PartialPooling.ipynb</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.util.score_variables", "modulename": "vtreat.util", "qualname": "score_variables", "kind": "function", "doc": "<p>Score the linear relation of variables to outcome.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cross_frame</strong>:  data frame to score</li>\n<li><strong>variables</strong>:  names of variables to score</li>\n<li><strong>outcome</strong>:  numeric outcome</li>\n<li><strong>is_classification</strong>:  logical, True if a classification problem (0/1)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data frame of variable evaluations, None if there are no non-constant variables.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cross_frame</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">variables</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">outcome</span>,</span><span class=\"param\">\t<span class=\"n\">is_classification</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.util.check_matching_numeric_frames", "modulename": "vtreat.util", "qualname": "check_matching_numeric_frames", "kind": "function", "doc": "<p>Check if two numeric pandas.DataFrame s are identical.  assert if not</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>res</strong>: </li>\n<li><strong>expect</strong>: </li>\n<li><strong>tol</strong>:  numeric tolerance.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">res</span>, </span><span class=\"param\"><span class=\"n\">expect</span>, </span><span class=\"param\"><span class=\"n\">tol</span><span class=\"o\">=</span><span class=\"mf\">0.0001</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.util.unique_items_in_order", "modulename": "vtreat.util", "qualname": "unique_items_in_order", "kind": "function", "doc": "<p>Return de-duplicated list of items in order they are in supplied array.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:  vector to inspect</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.util.clean_string", "modulename": "vtreat.util", "qualname": "clean_string", "kind": "function", "doc": "<p>Replace common symbols with column-name safe alternatives.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>s</strong>:  incoming string</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>string</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.util.build_level_codes", "modulename": "vtreat.util", "qualname": "build_level_codes", "kind": "function", "doc": "<p>Pick level names for a set of levels.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>incoming_column_name</strong>: </li>\n<li><strong>levels</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">incoming_column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">levels</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.util.hash_data_frame", "modulename": "vtreat.util", "qualname": "hash_data_frame", "kind": "function", "doc": "<p>Get a hash code representing a data frame.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>d</strong>:  data frame</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>hash code as a string</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_api", "modulename": "vtreat.vtreat_api", "kind": "module", "doc": "<p>Define user visible vtreat API.</p>\n"}, {"fullname": "vtreat.vtreat_api.vtreat_parameters", "modulename": "vtreat.vtreat_api", "qualname": "vtreat_parameters", "kind": "function", "doc": "<p>build a vtreat parameters dictionary, adding in user choices</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>user_params</strong>:  dictionary of user choices</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dictionary of user and default choices</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">user_params</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.unsupervised_parameters", "modulename": "vtreat.vtreat_api", "qualname": "unsupervised_parameters", "kind": "function", "doc": "<p>build a vtreat parameters dictionary for unsupervised tasks, adding in user choices</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>user_params</strong>:  dictionary of user choices</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dictionary of user and default choices</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">user_params</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.NumericOutcomeTreatment", "modulename": "vtreat.vtreat_api", "qualname": "NumericOutcomeTreatment", "kind": "class", "doc": "<p>manage a treatment plan for a numeric outcome (regression)</p>\n", "bases": "vtreat.vtreat_impl.VariableTreatment"}, {"fullname": "vtreat.vtreat_api.NumericOutcomeTreatment.__init__", "modulename": "vtreat.vtreat_api", "qualname": "NumericOutcomeTreatment.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>var_list</strong>:  list or tuple of column names, if empty all non outcome and copy columns are used</li>\n<li><strong>outcome_name</strong>:  name of column containing dependent variable</li>\n<li><strong>cols_to_copy</strong>:  list or tuple of column names</li>\n<li><strong>params</strong>:  vtreat.vtreat_parameters()</li>\n<li><strong>imputation_map</strong>:  map of column names to custom missing imputation values or functions</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">var_list</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">outcome_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cols_to_copy</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">imputation_map</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "vtreat.vtreat_api.NumericOutcomeTreatment.merge_params", "modulename": "vtreat.vtreat_api", "qualname": "NumericOutcomeTreatment.merge_params", "kind": "function", "doc": "<p>Merge user parameters, returns new parameters does not alter object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>p</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>merged parameters</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">p</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.NumericOutcomeTreatment.transform", "modulename": "vtreat.vtreat_api", "qualname": "NumericOutcomeTreatment.transform", "kind": "function", "doc": "<p>Apply transform to data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  data</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.NumericOutcomeTreatment.fit_transform", "modulename": "vtreat.vtreat_api", "qualname": "NumericOutcomeTreatment.fit_transform", "kind": "function", "doc": "<p>fit_transform data, this is the way to fit with cross methods.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  explanatory values</li>\n<li><strong>y</strong>:  dependent values</li>\n<li><strong>fit_params</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">fit_params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.BinomialOutcomeTreatment", "modulename": "vtreat.vtreat_api", "qualname": "BinomialOutcomeTreatment", "kind": "class", "doc": "<p>manage a treatment plan for a target outcome (binomial classification)</p>\n", "bases": "vtreat.vtreat_impl.VariableTreatment"}, {"fullname": "vtreat.vtreat_api.BinomialOutcomeTreatment.__init__", "modulename": "vtreat.vtreat_api", "qualname": "BinomialOutcomeTreatment.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>var_list</strong>:  list or tuple of column names, if empty all non outcome and copy columns are used</li>\n<li><strong>outcome_name</strong>:  name of column containing dependent variable</li>\n<li><strong>outcome_target</strong>:  value of outcome to consider \"positive\"</li>\n<li><strong>cols_to_copy</strong>:  list or tuple of column names</li>\n<li><strong>params</strong>:  vtreat.vtreat_parameters()</li>\n<li><strong>imputation_map</strong>:  map of column names to custom missing imputation values or functions</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">var_list</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">outcome_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">outcome_target</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cols_to_copy</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">imputation_map</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "vtreat.vtreat_api.BinomialOutcomeTreatment.merge_params", "modulename": "vtreat.vtreat_api", "qualname": "BinomialOutcomeTreatment.merge_params", "kind": "function", "doc": "<p>Merge user parameters, returns new parameters does not alter object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>p</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>merged parameters</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">p</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.BinomialOutcomeTreatment.transform", "modulename": "vtreat.vtreat_api", "qualname": "BinomialOutcomeTreatment.transform", "kind": "function", "doc": "<p>Apply transform to data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  data</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.BinomialOutcomeTreatment.fit_transform", "modulename": "vtreat.vtreat_api", "qualname": "BinomialOutcomeTreatment.fit_transform", "kind": "function", "doc": "<p>fit_transform data, this is the way to fit with cross methods.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  explanatory values</li>\n<li><strong>y</strong>:  dependent values</li>\n<li><strong>fit_params</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">fit_params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.MultinomialOutcomeTreatment", "modulename": "vtreat.vtreat_api", "qualname": "MultinomialOutcomeTreatment", "kind": "class", "doc": "<p>manage a treatment plan for a set of outcomes (multinomial classification)</p>\n", "bases": "vtreat.vtreat_impl.VariableTreatment"}, {"fullname": "vtreat.vtreat_api.MultinomialOutcomeTreatment.__init__", "modulename": "vtreat.vtreat_api", "qualname": "MultinomialOutcomeTreatment.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>var_list</strong>:  list or tuple of column names, if empty all non outcome and copy columns are used</li>\n<li><strong>outcome_name</strong>:  name of column containing dependent variable</li>\n<li><strong>cols_to_copy</strong>:  list or tuple of column names</li>\n<li><strong>params</strong>:  vtreat.vtreat_parameters()</li>\n<li><strong>imputation_map</strong>:  map of column names to custom missing imputation values or functions</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">var_list</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">outcome_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cols_to_copy</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">imputation_map</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "vtreat.vtreat_api.MultinomialOutcomeTreatment.outcomes_", "modulename": "vtreat.vtreat_api", "qualname": "MultinomialOutcomeTreatment.outcomes_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "vtreat.vtreat_api.MultinomialOutcomeTreatment.merge_params", "modulename": "vtreat.vtreat_api", "qualname": "MultinomialOutcomeTreatment.merge_params", "kind": "function", "doc": "<p>Merge user parameters, returns new parameters does not alter object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>p</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>merged parameters</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">p</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.MultinomialOutcomeTreatment.transform", "modulename": "vtreat.vtreat_api", "qualname": "MultinomialOutcomeTreatment.transform", "kind": "function", "doc": "<p>Apply transform to data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  data</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.MultinomialOutcomeTreatment.fit_transform", "modulename": "vtreat.vtreat_api", "qualname": "MultinomialOutcomeTreatment.fit_transform", "kind": "function", "doc": "<p>fit_transform data, this is the way to fit with cross methods.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  explanatory values</li>\n<li><strong>y</strong>:  dependent values</li>\n<li><strong>fit_params</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">fit_params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.UnsupervisedTreatment", "modulename": "vtreat.vtreat_api", "qualname": "UnsupervisedTreatment", "kind": "class", "doc": "<p>manage an unsupervised treatment plan</p>\n", "bases": "vtreat.vtreat_impl.VariableTreatment"}, {"fullname": "vtreat.vtreat_api.UnsupervisedTreatment.__init__", "modulename": "vtreat.vtreat_api", "qualname": "UnsupervisedTreatment.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>var_list</strong>:  list or tuple of column names, if empty all non copy columns are used</li>\n<li><strong>cols_to_copy</strong>:  list or tuple of column names</li>\n<li><strong>params</strong>:  vtreat.unsupervised_parameters()</li>\n<li><strong>imputation_map</strong>:  map of column names to custom missing imputation values or functions</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">var_list</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cols_to_copy</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">imputation_map</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "vtreat.vtreat_api.UnsupervisedTreatment.merge_params", "modulename": "vtreat.vtreat_api", "qualname": "UnsupervisedTreatment.merge_params", "kind": "function", "doc": "<p>Merge user parameters, returns new parameters does not alter object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>p</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>merged parameters</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">p</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.UnsupervisedTreatment.transform", "modulename": "vtreat.vtreat_api", "qualname": "UnsupervisedTreatment.transform", "kind": "function", "doc": "<p>Apply transform to data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  data</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.UnsupervisedTreatment.fit_transform", "modulename": "vtreat.vtreat_api", "qualname": "UnsupervisedTreatment.fit_transform", "kind": "function", "doc": "<p>fit_transform data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  explanatory values</li>\n<li><strong>y</strong>:  dependent values</li>\n<li><strong>fit_params</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">fit_params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_db_adapter", "modulename": "vtreat.vtreat_db_adapter", "kind": "module", "doc": "<p>Convert the description of a vtreat variable treatment into a data algebra pipeline.</p>\n"}, {"fullname": "vtreat.vtreat_db_adapter.as_data_algebra_pipeline", "modulename": "vtreat.vtreat_db_adapter", "qualname": "as_data_algebra_pipeline", "kind": "function", "doc": "<p>Convert the description of a vtreat transform (gotten via .description_matrix())\ninto a data algebra pipeline.\nSee: <a href=\"https://github.com/WinVector/data_algebra\">https://github.com/WinVector/data_algebra</a> and <a href=\"https://github.com/WinVector/pyvtreat\">https://github.com/WinVector/pyvtreat</a> .\nMissing and nan are treated as synonyms for '_NA_'.\nAssembling the entire pipeline can be expensive. If one is willing to instantiate tables\nit can be better to sequence operations instead of composing them.\nAnother way to use this methodology would be to port this code as a stored procedure\nin a target database of choice, meaning only the vtreat_descr table would be needed on such systems.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source</strong>:  input data.</li>\n<li><strong>vtreat_descr</strong>:  .description_matrix() description of transform.\nExpected invariant: CleanNumericTransform doesn't change variable names,\nall other operations produce new names.</li>\n<li><strong>treatment_table_name</strong>:  name to use for the vtreat_descr table.</li>\n<li><strong>row_keys</strong>:  list of columns uniquely keying rows</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>data algebra pipeline implementing specified vtreat treatment</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">TableDescription</span>,</span><span class=\"param\">\t<span class=\"n\">vtreat_descr</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">treatment_table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">row_keys</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">data_algebra</span><span class=\"o\">.</span><span class=\"n\">data_ops</span><span class=\"o\">.</span><span class=\"n\">ViewRepresentation</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl", "modulename": "vtreat.vtreat_impl", "kind": "module", "doc": "<p>vtreat main implementation</p>\n"}, {"fullname": "vtreat.vtreat_impl.bad_sentinel", "modulename": "vtreat.vtreat_impl", "qualname": "bad_sentinel", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;_NA_&#x27;"}, {"fullname": "vtreat.vtreat_impl.replace_bad_with_sentinel", "modulename": "vtreat.vtreat_impl", "qualname": "replace_bad_with_sentinel", "kind": "function", "doc": "<p>Replace None/NaN entries in iterable with '_NA_'</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ar</strong>:  iterable</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>one dimensional numpy array</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ar</span><span class=\"p\">:</span> <span class=\"n\">List</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.ready_data_frame", "modulename": "vtreat.vtreat_impl", "qualname": "ready_data_frame", "kind": "function", "doc": "<p>Convert an array-like object to a data frame for processing.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>d</strong>:  data frame like object to work with</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dataframe with string-named columns</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">d</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.back_to_orig_type_data_frame", "modulename": "vtreat.vtreat_impl", "qualname": "back_to_orig_type_data_frame", "kind": "function", "doc": "<p>Convert data frame back to ndarray if that was the original type.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>d</strong>:  data frame</li>\n<li><strong>orig_type</strong>:  type of original object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>converted result</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">orig_type</span><span class=\"p\">:</span> <span class=\"nb\">type</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VarTransform", "modulename": "vtreat.vtreat_impl", "qualname": "VarTransform", "kind": "class", "doc": "<p>Base class for vtreat transforms</p>\n", "bases": "abc.ABC"}, {"fullname": "vtreat.vtreat_impl.VarTransform.__init__", "modulename": "vtreat.vtreat_impl", "qualname": "VarTransform.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>incoming_column_name</strong>: </li>\n<li><strong>incoming_column_is_numeric</strong>: </li>\n<li><strong>derived_column_names</strong>: </li>\n<li><strong>treatment</strong>: </li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">incoming_column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">incoming_column_is_numeric</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">derived_column_names</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">treatment</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "vtreat.vtreat_impl.VarTransform.incoming_column_name_", "modulename": "vtreat.vtreat_impl", "qualname": "VarTransform.incoming_column_name_", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "vtreat.vtreat_impl.VarTransform.incoming_column_is_numeric_", "modulename": "vtreat.vtreat_impl", "qualname": "VarTransform.incoming_column_is_numeric_", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "vtreat.vtreat_impl.VarTransform.derived_column_names_", "modulename": "vtreat.vtreat_impl", "qualname": "VarTransform.derived_column_names_", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "vtreat.vtreat_impl.VarTransform.need_cross_treatment_", "modulename": "vtreat.vtreat_impl", "qualname": "VarTransform.need_cross_treatment_", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "vtreat.vtreat_impl.VarTransform.treatment_", "modulename": "vtreat.vtreat_impl", "qualname": "VarTransform.treatment_", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "vtreat.vtreat_impl.VarTransform.refitter_", "modulename": "vtreat.vtreat_impl", "qualname": "VarTransform.refitter_", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Callable]"}, {"fullname": "vtreat.vtreat_impl.VarTransform.extra_args_", "modulename": "vtreat.vtreat_impl", "qualname": "VarTransform.extra_args_", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Dict[str, Any]]"}, {"fullname": "vtreat.vtreat_impl.VarTransform.params_", "modulename": "vtreat.vtreat_impl", "qualname": "VarTransform.params_", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Dict[str, Any]]"}, {"fullname": "vtreat.vtreat_impl.VarTransform.transform", "modulename": "vtreat.vtreat_impl", "qualname": "VarTransform.transform", "kind": "function", "doc": "<p>return a transformed data frame</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data_frame</strong>:  incoming values</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed values</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data_frame</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VarTransform.description_matrix", "modulename": "vtreat.vtreat_impl", "qualname": "VarTransform.description_matrix", "kind": "function", "doc": "<p>Return description of transform as a data frame.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>description of transform.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.TreatmentPlan", "modulename": "vtreat.vtreat_impl", "qualname": "TreatmentPlan", "kind": "class", "doc": "<p>Class to carry treatment plans.</p>\n"}, {"fullname": "vtreat.vtreat_impl.TreatmentPlan.__init__", "modulename": "vtreat.vtreat_impl", "qualname": "TreatmentPlan.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">outcome_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cols_to_copy</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">num_list</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cat_list</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">xforms</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">vtreat</span><span class=\"o\">.</span><span class=\"n\">vtreat_impl</span><span class=\"o\">.</span><span class=\"n\">VarTransform</span><span class=\"p\">]]</span></span>)</span>"}, {"fullname": "vtreat.vtreat_impl.TreatmentPlan.outcome_name", "modulename": "vtreat.vtreat_impl", "qualname": "TreatmentPlan.outcome_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "vtreat.vtreat_impl.TreatmentPlan.cols_to_copy", "modulename": "vtreat.vtreat_impl", "qualname": "TreatmentPlan.cols_to_copy", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Tuple[str, ...]"}, {"fullname": "vtreat.vtreat_impl.TreatmentPlan.num_list", "modulename": "vtreat.vtreat_impl", "qualname": "TreatmentPlan.num_list", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Tuple[str, ...]"}, {"fullname": "vtreat.vtreat_impl.TreatmentPlan.cat_list", "modulename": "vtreat.vtreat_impl", "qualname": "TreatmentPlan.cat_list", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Tuple[str, ...]"}, {"fullname": "vtreat.vtreat_impl.TreatmentPlan.xforms", "modulename": "vtreat.vtreat_impl", "qualname": "TreatmentPlan.xforms", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Tuple[vtreat.vtreat_impl.VarTransform, ...]"}, {"fullname": "vtreat.vtreat_impl.MappedCodeTransform", "modulename": "vtreat.vtreat_impl", "qualname": "MappedCodeTransform", "kind": "class", "doc": "<p>Class for transforms that are a dictionary mapping of strings to numeric values</p>\n", "bases": "VarTransform"}, {"fullname": "vtreat.vtreat_impl.MappedCodeTransform.__init__", "modulename": "vtreat.vtreat_impl", "qualname": "MappedCodeTransform.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>incoming_column_name</strong>: </li>\n<li><strong>derived_column_name</strong>: </li>\n<li><strong>treatment</strong>: </li>\n<li><strong>code_book</strong>:  Pandas dataframe mapping values to impact codes</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">incoming_column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">derived_column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">treatment</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">code_book</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span>)</span>"}, {"fullname": "vtreat.vtreat_impl.MappedCodeTransform.code_book_", "modulename": "vtreat.vtreat_impl", "qualname": "MappedCodeTransform.code_book_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "vtreat.vtreat_impl.MappedCodeTransform.transform", "modulename": "vtreat.vtreat_impl", "qualname": "MappedCodeTransform.transform", "kind": "function", "doc": "<p>return a transformed data frame</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data_frame</strong>:  incoming values</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed values</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data_frame</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.MappedCodeTransform.description_matrix", "modulename": "vtreat.vtreat_impl", "qualname": "MappedCodeTransform.description_matrix", "kind": "function", "doc": "<p>Return description of transform as a data frame.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>description of transform.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.YAwareMappedCodeTransform", "modulename": "vtreat.vtreat_impl", "qualname": "YAwareMappedCodeTransform", "kind": "class", "doc": "<p>Class for transforms that are a y-aware dictionary mapping of values</p>\n", "bases": "MappedCodeTransform"}, {"fullname": "vtreat.vtreat_impl.YAwareMappedCodeTransform.__init__", "modulename": "vtreat.vtreat_impl", "qualname": "YAwareMappedCodeTransform.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>incoming_column_name</strong>:  name of incoming column</li>\n<li><strong>derived_column_name</strong>:  name of incoming column</li>\n<li><strong>treatment</strong>:  name of treatment</li>\n<li><strong>code_book</strong>:  pandas data frame mapping values to codes</li>\n<li><strong>refitter</strong>:  function to re-fit</li>\n<li><strong>extra_args</strong>:  extra args for fit_* functions</li>\n<li><strong>params</strong>:  configuration control parameters</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">incoming_column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">derived_column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">treatment</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">code_book</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">refitter</span>,</span><span class=\"param\">\t<span class=\"n\">extra_args</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "vtreat.vtreat_impl.YAwareMappedCodeTransform.need_cross_treatment_", "modulename": "vtreat.vtreat_impl", "qualname": "YAwareMappedCodeTransform.need_cross_treatment_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "vtreat.vtreat_impl.YAwareMappedCodeTransform.refitter_", "modulename": "vtreat.vtreat_impl", "qualname": "YAwareMappedCodeTransform.refitter_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "vtreat.vtreat_impl.YAwareMappedCodeTransform.extra_args_", "modulename": "vtreat.vtreat_impl", "qualname": "YAwareMappedCodeTransform.extra_args_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "vtreat.vtreat_impl.YAwareMappedCodeTransform.params_", "modulename": "vtreat.vtreat_impl", "qualname": "YAwareMappedCodeTransform.params_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "vtreat.vtreat_impl.CleanNumericTransform", "modulename": "vtreat.vtreat_impl", "qualname": "CleanNumericTransform", "kind": "class", "doc": "<p>Class for numeric column cleaner.</p>\n", "bases": "VarTransform"}, {"fullname": "vtreat.vtreat_impl.CleanNumericTransform.__init__", "modulename": "vtreat.vtreat_impl", "qualname": "CleanNumericTransform.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>incoming_column_name</strong>: </li>\n<li><strong>replacement_value</strong>: </li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">incoming_column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">replacement_value</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "vtreat.vtreat_impl.CleanNumericTransform.replacement_value_", "modulename": "vtreat.vtreat_impl", "qualname": "CleanNumericTransform.replacement_value_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "vtreat.vtreat_impl.CleanNumericTransform.transform", "modulename": "vtreat.vtreat_impl", "qualname": "CleanNumericTransform.transform", "kind": "function", "doc": "<p>return a transformed data frame</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data_frame</strong>:  incoming values</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed values</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data_frame</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.CleanNumericTransform.description_matrix", "modulename": "vtreat.vtreat_impl", "qualname": "CleanNumericTransform.description_matrix", "kind": "function", "doc": "<p>Return description of transform as a data frame.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>description of transform.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.IndicateMissingTransform", "modulename": "vtreat.vtreat_impl", "qualname": "IndicateMissingTransform", "kind": "class", "doc": "<p>Class for missing value indicator.</p>\n", "bases": "VarTransform"}, {"fullname": "vtreat.vtreat_impl.IndicateMissingTransform.__init__", "modulename": "vtreat.vtreat_impl", "qualname": "IndicateMissingTransform.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>incoming_column_name</strong>: </li>\n<li><strong>derived_column_name</strong>: </li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">incoming_column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">incoming_column_is_numeric</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">derived_column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "vtreat.vtreat_impl.IndicateMissingTransform.transform", "modulename": "vtreat.vtreat_impl", "qualname": "IndicateMissingTransform.transform", "kind": "function", "doc": "<p>return a transformed data frame</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data_frame</strong>:  incoming values</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed values</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data_frame</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.IndicateMissingTransform.description_matrix", "modulename": "vtreat.vtreat_impl", "qualname": "IndicateMissingTransform.description_matrix", "kind": "function", "doc": "<p>Return description of transform as a data frame.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>description of transform.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_clean_code", "modulename": "vtreat.vtreat_impl", "qualname": "fit_clean_code", "kind": "function", "doc": "<p>Fit numeric clean column imputation transform</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>incoming_column_name</strong>:  name of column</li>\n<li><strong>x</strong>:  training values for column</li>\n<li><strong>params</strong>:  control parameter dictionary</li>\n<li><strong>imputation_map</strong>:  per-column map to imputation strategies or values</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transform</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">incoming_column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">x</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">imputation_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">vtreat</span><span class=\"o\">.</span><span class=\"n\">vtreat_impl</span><span class=\"o\">.</span><span class=\"n\">VarTransform</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_regression_impact_code", "modulename": "vtreat.vtreat_impl", "qualname": "fit_regression_impact_code", "kind": "function", "doc": "<p>Fit regression impact code transform</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>incoming_column_name</strong>: </li>\n<li><strong>x</strong>:  training explanatory values</li>\n<li><strong>y</strong>:  training dependent values</li>\n<li><strong>extra_args</strong>:  optional extra arguments for fit_ methods</li>\n<li><strong>params</strong>:  control parameter dictionary</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">incoming_column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">x</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">extra_args</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">vtreat</span><span class=\"o\">.</span><span class=\"n\">vtreat_impl</span><span class=\"o\">.</span><span class=\"n\">VarTransform</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_regression_deviation_code", "modulename": "vtreat.vtreat_impl", "qualname": "fit_regression_deviation_code", "kind": "function", "doc": "<p>Fit regression deviation code transform</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>incoming_column_name</strong>: </li>\n<li><strong>x</strong>:  training explanatory values</li>\n<li><strong>y</strong>:  training dependent values</li>\n<li><strong>extra_args</strong>:  optional extra arguments for fit_ methods</li>\n<li><strong>params</strong>:  control parameter dictionary</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">incoming_column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">x</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">extra_args</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">vtreat</span><span class=\"o\">.</span><span class=\"n\">vtreat_impl</span><span class=\"o\">.</span><span class=\"n\">VarTransform</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_binomial_impact_code", "modulename": "vtreat.vtreat_impl", "qualname": "fit_binomial_impact_code", "kind": "function", "doc": "<p>Fit categorical impact code.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>incoming_column_name</strong>: </li>\n<li><strong>x</strong>:  training explanatory values</li>\n<li><strong>y</strong>:  training dependent values</li>\n<li><strong>extra_args</strong>:  required extra arguments for fit_ methods</li>\n<li><strong>params</strong>:  control parameter dictionary</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">incoming_column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">x</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">extra_args</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">vtreat</span><span class=\"o\">.</span><span class=\"n\">vtreat_impl</span><span class=\"o\">.</span><span class=\"n\">VarTransform</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.IndicatorCodeTransform", "modulename": "vtreat.vtreat_impl", "qualname": "IndicatorCodeTransform", "kind": "class", "doc": "<p>Class for indicator codes</p>\n", "bases": "VarTransform"}, {"fullname": "vtreat.vtreat_impl.IndicatorCodeTransform.__init__", "modulename": "vtreat.vtreat_impl", "qualname": "IndicatorCodeTransform.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>incoming_column_name</strong>: </li>\n<li><strong>derived_column_names</strong>: </li>\n<li><strong>levels</strong>:  leves we are encoding to indicators</li>\n<li><strong>sparse_indicators</strong>:  if True use sparse data structure</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">incoming_column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">derived_column_names</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">levels</span><span class=\"p\">:</span> <span class=\"n\">List</span>,</span><span class=\"param\">\t<span class=\"n\">sparse_indicators</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "vtreat.vtreat_impl.IndicatorCodeTransform.levels_", "modulename": "vtreat.vtreat_impl", "qualname": "IndicatorCodeTransform.levels_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "vtreat.vtreat_impl.IndicatorCodeTransform.sparse_indicators_", "modulename": "vtreat.vtreat_impl", "qualname": "IndicatorCodeTransform.sparse_indicators_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "vtreat.vtreat_impl.IndicatorCodeTransform.transform", "modulename": "vtreat.vtreat_impl", "qualname": "IndicatorCodeTransform.transform", "kind": "function", "doc": "<p>return a transformed data frame</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data_frame</strong>:  incoming values</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed values</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_frame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.IndicatorCodeTransform.description_matrix", "modulename": "vtreat.vtreat_impl", "qualname": "IndicatorCodeTransform.description_matrix", "kind": "function", "doc": "<p>Return description of transform as a data frame.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>description of transform.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_indicator_code", "modulename": "vtreat.vtreat_impl", "qualname": "fit_indicator_code", "kind": "function", "doc": "<p>Fit indicator codes</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>incoming_column_name</strong>: </li>\n<li><strong>x</strong>:  training explanatory variables</li>\n<li><strong>min_fraction</strong>: </li>\n<li><strong>max_levels</strong>: </li>\n<li><strong>sparse_indicators</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">incoming_column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">x</span>,</span><span class=\"param\">\t<span class=\"n\">min_fraction</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">max_levels</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sparse_indicators</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">vtreat</span><span class=\"o\">.</span><span class=\"n\">vtreat_impl</span><span class=\"o\">.</span><span class=\"n\">VarTransform</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_prevalence_code", "modulename": "vtreat.vtreat_impl", "qualname": "fit_prevalence_code", "kind": "function", "doc": "<p>Fit a prevalence code</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>incoming_column_name</strong>: </li>\n<li><strong>x</strong>:  training explanatory values</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">incoming_column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">x</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">vtreat</span><span class=\"o\">.</span><span class=\"n\">vtreat_impl</span><span class=\"o\">.</span><span class=\"n\">VarTransform</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_numeric_outcome_treatment", "modulename": "vtreat.vtreat_impl", "qualname": "fit_numeric_outcome_treatment", "kind": "function", "doc": "<p>Fit set of treatments in a regression situation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  training explanatory values</li>\n<li><strong>y</strong>:  training dependent values</li>\n<li><strong>var_list</strong>:  list of dependent variable names, if empty all non outcome and copy columns are used</li>\n<li><strong>outcome_name</strong>:  name for outcome column</li>\n<li><strong>cols_to_copy</strong>:  list of columns to copy to output</li>\n<li><strong>params</strong>:  control parameter dictionary</li>\n<li><strong>imputation_map</strong>:  per-column map to imputation strategies or values</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transform plan</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">X</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">var_list</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">outcome_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">cols_to_copy</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">imputation_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">vtreat</span><span class=\"o\">.</span><span class=\"n\">vtreat_impl</span><span class=\"o\">.</span><span class=\"n\">TreatmentPlan</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_binomial_outcome_treatment", "modulename": "vtreat.vtreat_impl", "qualname": "fit_binomial_outcome_treatment", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  training explanatory values</li>\n<li><strong>y</strong>:  training dependent values</li>\n<li><strong>outcome_target</strong>:  dependent value to consider positive or in class</li>\n<li><strong>var_list</strong>:  list of variables to process, if empty all non outcome and copy columns are used</li>\n<li><strong>outcome_name</strong>:  name for outcome column</li>\n<li><strong>cols_to_copy</strong>:  list of columns to copy to output</li>\n<li><strong>params</strong>:  control parameter dictionary</li>\n<li><strong>imputation_map</strong>:  per-column map to imputation strategies or values</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transform plan</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">X</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">outcome_target</span>,</span><span class=\"param\">\t<span class=\"n\">var_list</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">outcome_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">cols_to_copy</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">imputation_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">vtreat</span><span class=\"o\">.</span><span class=\"n\">vtreat_impl</span><span class=\"o\">.</span><span class=\"n\">TreatmentPlan</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_multinomial_outcome_treatment", "modulename": "vtreat.vtreat_impl", "qualname": "fit_multinomial_outcome_treatment", "kind": "function", "doc": "<p>Fit a variable treatment for multinomial outcomes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  training explanatory values</li>\n<li><strong>y</strong>:  training dependent values</li>\n<li><strong>var_list</strong>:  list of variables to process, if empty all non outcome and copy columns are used</li>\n<li><strong>outcome_name</strong>:  name for outcome column</li>\n<li><strong>cols_to_copy</strong>:  list of columns to copy to output</li>\n<li><strong>params</strong>:  control parameter dictionary</li>\n<li><strong>imputation_map</strong>:  per-column map to imputation strategies or values</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">X</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">var_list</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">outcome_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">cols_to_copy</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">imputation_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">vtreat</span><span class=\"o\">.</span><span class=\"n\">vtreat_impl</span><span class=\"o\">.</span><span class=\"n\">TreatmentPlan</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_unsupervised_treatment", "modulename": "vtreat.vtreat_impl", "qualname": "fit_unsupervised_treatment", "kind": "function", "doc": "<p>Fit a data treatment in the unsupervised case.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  training explanatory values</li>\n<li><strong>var_list</strong>:  list of variables to process, if empty all non copy columns are used</li>\n<li><strong>outcome_name</strong>:  name for outcome column</li>\n<li><strong>cols_to_copy</strong>:  list of columns to copy to output</li>\n<li><strong>params</strong>:  control parameter dictionary</li>\n<li><strong>imputation_map</strong>:  per-column map to imputation strategies or values</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">X</span>,</span><span class=\"param\">\t<span class=\"n\">var_list</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">outcome_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">cols_to_copy</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">imputation_map</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">vtreat</span><span class=\"o\">.</span><span class=\"n\">vtreat_impl</span><span class=\"o\">.</span><span class=\"n\">TreatmentPlan</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.pre_prep_frame", "modulename": "vtreat.vtreat_impl", "qualname": "pre_prep_frame", "kind": "function", "doc": "<p>Create a copy of pandas.DataFrame x restricted to col_list union cols_to_copy with col_list - cols_to_copy\nconverted to only string and numeric types.  New pandas.DataFrame has trivial indexing.  If col_list\nis empty it is interpreted as all columns.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>: </li>\n<li><strong>col_list</strong>: </li>\n<li><strong>cols_to_copy</strong>: </li>\n<li><strong>cat_cols</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">col_list</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">cols_to_copy</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">cat_cols</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.cross_patch_refit_y_aware_cols", "modulename": "vtreat.vtreat_impl", "qualname": "cross_patch_refit_y_aware_cols", "kind": "function", "doc": "<p>Re fit the y-aware columns according to cross plan.\nClears out refitter_ values to None.\nAssumes each y-aware variable produces one derived column.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:  explanatory values</li>\n<li><strong>y</strong>:  dependent values</li>\n<li><strong>res</strong>:  transformed frame to patch results into, altered</li>\n<li><strong>plan</strong>:  fitting plan</li>\n<li><strong>cross_plan</strong>:  cross validation plan</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>no return, res is altered in place</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">res</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">plan</span><span class=\"p\">:</span> <span class=\"n\">vtreat</span><span class=\"o\">.</span><span class=\"n\">vtreat_impl</span><span class=\"o\">.</span><span class=\"n\">TreatmentPlan</span>,</span><span class=\"param\">\t<span class=\"n\">cross_plan</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.cross_patch_user_y_aware_cols", "modulename": "vtreat.vtreat_impl", "qualname": "cross_patch_user_y_aware_cols", "kind": "function", "doc": "<p>Re fit the user y-aware columns according to cross plan.\nAssumes each y-aware variable produces one derived column.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:  explanatory values</li>\n<li><strong>y</strong>:  dependent values</li>\n<li><strong>res</strong>:  transformed frame to patch results into, altered</li>\n<li><strong>params</strong>:  control parameter dictionary</li>\n<li><strong>cross_plan</strong>:  cross validation plan</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>no return, res altered in place</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">res</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">cross_plan</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.score_plan_variables", "modulename": "vtreat.vtreat_impl", "qualname": "score_plan_variables", "kind": "function", "doc": "<p>Quality score variables to build up score frame.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cross_frame</strong>:  cross transformed explanatory variables</li>\n<li><strong>outcome</strong>:  dependent variable</li>\n<li><strong>plan</strong>:  treatment plan</li>\n<li><strong>params</strong>:  control parameter dictionary</li>\n<li><strong>is_classification</strong>:  logical, if True classification if False regression</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>score frame</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cross_frame</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">outcome</span>,</span><span class=\"param\">\t<span class=\"n\">plan</span><span class=\"p\">:</span> <span class=\"n\">vtreat</span><span class=\"o\">.</span><span class=\"n\">vtreat_impl</span><span class=\"o\">.</span><span class=\"n\">TreatmentPlan</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">is_classification</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.pseudo_score_plan_variables", "modulename": "vtreat.vtreat_impl", "qualname": "pseudo_score_plan_variables", "kind": "function", "doc": "<p>Build a score frame look-alike for unsupervised case.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cross_frame</strong>:  cross transformed explanatory variables</li>\n<li><strong>plan</strong>:  treatment plan</li>\n<li><strong>params</strong>:  control parameter dictionary</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>score frame</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">cross_frame</span>,</span><span class=\"param\">\t<span class=\"n\">plan</span><span class=\"p\">:</span> <span class=\"n\">vtreat</span><span class=\"o\">.</span><span class=\"n\">vtreat_impl</span><span class=\"o\">.</span><span class=\"n\">TreatmentPlan</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment", "kind": "class", "doc": "<p>Class for variable treatments, implements much of the sklearn pipeline/transformer\nAPI. <a href=\"https://sklearn-template.readthedocs.io/en/latest/user_guide.html#transformer\">https://sklearn-template.readthedocs.io/en/latest/user_guide.html#transformer</a></p>\n", "bases": "abc.ABC, sklearn.base.BaseEstimator, sklearn.base.TransformerMixin"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.__init__", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>var_list</strong>:  variables we intend to encode, empty means all</li>\n<li><strong>outcome_name</strong>:  column name of outcome</li>\n<li><strong>outcome_target</strong>:  outcome column value we consider in class or True</li>\n<li><strong>cols_to_copy</strong>:  columns to not process, but copy over</li>\n<li><strong>params</strong>:  control and configuration parameters</li>\n<li><strong>imputation_map</strong>:  per column imputation strategies or values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">var_list</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">outcome_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">outcome_target</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cols_to_copy</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">imputation_map</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.result_restriction", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.result_restriction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Set[str]]"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.outcome_name_", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.outcome_name_", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.outcome_target_", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.outcome_target_", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Any]"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.var_list_", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.var_list_", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.cols_to_copy_", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.cols_to_copy_", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.params_", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.params_", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.plan_", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.plan_", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[vtreat.vtreat_impl.TreatmentPlan]"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.score_frame_", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.score_frame_", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[pandas.core.frame.DataFrame]"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.imputation_map_", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.imputation_map_", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Callable]"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.last_fit_x_id_", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.last_fit_x_id_", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.cross_plan_", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.cross_plan_", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[List[Dict[str, List[int]]]]"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.cross_rows_", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.cross_rows_", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.last_result_columns", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.last_result_columns", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[List[str]]"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.check_column_names", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.check_column_names", "kind": "function", "doc": "<p>Check that none of the column names we are working with are non-unique.\nAlso check variable columns are all present (columns to copy and outcome allowed to be missing).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>col_names</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None, raises exception if there is a problem</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">col_names</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.clear", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.clear", "kind": "function", "doc": "<p>reset state</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.get_result_restriction", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.get_result_restriction", "kind": "function", "doc": "<p>accessor</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.set_result_restriction", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.set_result_restriction", "kind": "function", "doc": "<p>setter</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_vars</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.merge_params", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.merge_params", "kind": "function", "doc": "<p>merge in use parameters</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">p</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.fit", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.fit", "kind": "function", "doc": "<p>sklearn fit.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  explanatory variables</li>\n<li><strong>y</strong>:  (optional) dependent variable</li>\n<li><strong>fit_params</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>self (for method chaining)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">fit_params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.fit_transform", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.fit_transform", "kind": "function", "doc": "<p>sklearn fit_transform, correct way to trigger cross methods.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  explanatory variables</li>\n<li><strong>y</strong>:  (optional) dependent variable</li>\n<li><strong>fit_params</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">fit_params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.transform", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.transform", "kind": "function", "doc": "<p>sklearn transform</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  explanatory variables</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.get_params", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.get_params", "kind": "function", "doc": "<p>vtreat exposes a subset of controls as tunable parameters, users can choose this set\nby specifying the tunable_params list in object construction parameters</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>deep</strong>:  ignored</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict of tunable parameters</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">deep</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.set_params", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.set_params", "kind": "function", "doc": "<p>vtreat exposes a subset of controls as tunable parameters, users can choose this set\nby specifying the tunable_params list in object construction parameters</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>params</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>self (for method chaining)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.fit_predict", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.fit_predict", "kind": "function", "doc": "<p>Alias for fit_transform()</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  explanatory variables</li>\n<li><strong>y</strong>:  (optional) dependent variable</li>\n<li><strong>fit_params</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">fit_params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.predict", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.predict", "kind": "function", "doc": "<p>Alias for transform.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  explanatory variables</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.predict_proba", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.predict_proba", "kind": "function", "doc": "<p>Alias for transform.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  explanatory variables</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.get_feature_names", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.get_feature_names", "kind": "function", "doc": "<p>Get list of produced feature names.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_features</strong>:  Optional, restrict to these features</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">input_features</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.description_matrix", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.description_matrix", "kind": "function", "doc": "<p>Return description of transform as a data frame. Does not encode user steps. Not yet implemented for\nmultinomial dependent variables.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>description of transform.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.perform_transform", "modulename": "vtreat.vtreat_impl", "qualname": "perform_transform", "kind": "function", "doc": "<p>Transform a data frame.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:  data to be transformed.</li>\n<li><strong>transform</strong>:  transform</li>\n<li><strong>params</strong>:  control parameter dictionary</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>new data frame</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">transform</span><span class=\"p\">:</span> <span class=\"n\">vtreat</span><span class=\"o\">.</span><span class=\"n\">vtreat_impl</span><span class=\"o\">.</span><span class=\"n\">VariableTreatment</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.limit_to_appropriate_columns", "modulename": "vtreat.vtreat_impl", "qualname": "limit_to_appropriate_columns", "kind": "function", "doc": "<p>Limit down to appropriate columns.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>res</strong>: </li>\n<li><strong>transform</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">res</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">transform</span><span class=\"p\">:</span> <span class=\"n\">vtreat</span><span class=\"o\">.</span><span class=\"n\">vtreat_impl</span><span class=\"o\">.</span><span class=\"n\">VariableTreatment</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();